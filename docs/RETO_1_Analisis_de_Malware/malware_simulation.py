
import time
import base64
import sys
import random

def slow_print(text, delay=0.05):
    for c in text:
        sys.stdout.write(c)
        sys.stdout.flush()
        time.sleep(delay)
    print()

def fake_analysis():
    steps = [
        "[+] Inicializando módulo de análisis forense...",
        "[✓] Cargando firmas de malware...",
        "[✓] Verificando integridad del sistema...",
        "[!] Anomalía detectada en el proceso svch0st.exe",
        "[✓] Conectando con sandbox remota...",
        "[✓] Tráfico de red saliente interceptado",
        "[+] Reensamblando paquetes fragmentados...",
        "[✓] Patrón de ataque identificado: WannaCry Variant",
        "[!] Detectado módulo de cifrado activo",
        "[+] Descifrando flujo UDP sospechoso...",
        "[✓] Cadenas codificadas encontradas. Intentando decodificar...",
    ]
    for step in steps:
        slow_print(step, delay=random.uniform(0.03, 0.08))
        time.sleep(random.uniform(0.3, 1.1))

    encoded_flag = base64.b64encode(b"junkjunkjunkflag{wannacry_traffic}noise").decode()
    junk_data = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz0123456789', k=100))
    full_payload = f"{junk_data}{encoded_flag}{junk_data}"

    slow_print("[✓] Análisis completado.")
    slow_print("[i] Muestra extraída para inspección manual:\n")
    print(full_payload[:150] + "..." + full_payload[-150:])
    slow_print("\n[i] Consejo: Busca cadenas codificadas. Puede que algo esté escondido.\n")

if __name__ == "__main__":
    fake_analysis()
